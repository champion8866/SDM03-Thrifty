openapi: 3.0.0

info:
  title: Thrifty API
  description: ''
  version: '1.0'

paths:
  /api/1.0/admin/store:
    get:
      summary: Returns store's information.
      description: |-
        Example 的 Store ID 可能會因為資料庫的變動而改變，請以 POST method 實際回傳的 Store ID 作為測試 ID。
      tags:
        - Store Admin API
      parameters:
        - name: id
          in: query
          description: |-
            The Store's ID that you want to access. 

             *Example*: 64297c685d38da6c6aec99d2
          required: false
          schema:
            type: string
            example: '64297c685d38da6c6aec99d2'
      responses:
        '200':
          description: 回傳含有 storeInfo 的 data Object
        '400':
          description: 查無店家資訊
        '500':
          description: Internal Server Error

    post:
      summary: Create a store's information.
      tags:
        - Store Admin API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInfo'

      responses:
        '200':
          description: 回傳含有 storeInfo 的 data Object
        '400':
          description: Bad request，回傳 message Object
        '500':
          description: Internal Server Error

    put:
      summary: Update store's information.
      description: |-
        Example 的 Store ID 可能會因為資料庫的變動而改變，請以 POST method 實際回傳的 Store ID 作為測試 ID。
      tags:
        - Store Admin API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUpdate'

      responses:
        '200':
          description: 回傳含有 storeInfo 的 data Object
        '400':
          description: Bad request，回傳 message Object
        '500':
          description: Internal Server Error

    delete:
      summary: Delete store's information.
      description: |-
        Example 的 Store ID 可能會因為資料庫的變動而改變，請以 POST method 實際回傳的 Store ID 作為測試 ID。
      tags:
        - Store Admin API
      parameters:
        - name: id
          in: query
          description: |-
            The Store's ID that you want to delete. 

             *Example*: 64297c685d38da6c6aec99d2
          required: false
          schema:
            type: string
            example: '64297c685d38da6c6aec99d2'
      responses: 
        '200':
          description: 回傳 message Object
        '400':
          description: 無對應店家的ID，或是該店家已被刪除。
                        <br>回傳 message Object
        '500':
          description: Internal Server Error

  /api/1.0/admin/food:
    get:
      summary: Returns food's information.
      description: |-
        Example 的 Food ID 可能會因為資料庫的變動而改變，請以 POST method 實際回傳的 Food ID 作為測試 ID。
      tags:
        - Food Admin API
      parameters:
        - name: id
          in: query
          description: |-
            The Food's ID that you want to access. 

             *Example*: 642a70ecd0781a1d4a5ab4e4
          required: false
          schema:
            type: string
            example: '642a70ecd0781a1d4a5ab4e4'
      responses:
        '200':
          description: 回傳含有 foodInfo 的 data Object
        '400':
          description: 查無店家資訊
        '500':
          description: Internal Server Error

    post:
      summary: Create a food's information.
      tags:
        - Food Admin API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodInfo'

      responses:
        '200':
          description: 回傳含有 foodInfo 的 data Object
        '400':
          description: Bad request，回傳 message Object
        '500':
          description: Internal Server Error

    put:
      summary: Update a food's information.
      tags:
        - Food Admin API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodUpdate'

      responses:
        '200':
          description: 回傳含有 foodInfo 的 data Object
        '400':
          description: Bad request，回傳 message Object
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a food's information.
      tags:
        - Food Admin API
      parameters:
        - name: foodID
          in: query
          description: |-
            The Food's ID that you want to delete. 

             *Example*: 642a7d4c70a28783d10cd54f
          required: false
          schema:
            type: string
            example: '642a7d4c70a28783d10cd54f'

        - name: storeID
          in: query
          description: |-
            The store's ID. 

             *Example*: 642a9a4510330d767c0fd0e7
          required: false
          schema:
            type: string
            example: '642a9a4510330d767c0fd0e7'

      responses:
        '200':
          description: 回傳 message Object
        '400':
          description: 無對應食物品項的ID，或是該食物品項已被刪除。
                        <br>回傳 message Object
        '500':
          description: Internal Server Error

  /api/1.0/admin/stock:
    summary: 測試
    get:
      summary: Returns stock's information with food's information.
      description: |-
        Example 的 Food ID 可能會因為資料庫的變動而改變，請以 POST method 實際回傳的 Food ID 作為測試 ID。
      tags:
        - Stock Admin API
      parameters:
        - name: id
          in: query
          description: |-
            The Store's ID that you want to get its stock. 

             *Example*: 642a9a4510330d767c0fd0e7
          required: false
          schema:
            type: string
            example: '642a9a4510330d767c0fd0e7'
      responses:
        '200':
          description: 回傳裝有 stocks 資訊的 data Object。<br>
                       沒有品項會回傳 message Object。
        '400':
          description: id 格式錯誤
        '500':
          description: Internal Server Error


    put:
      summary: Update stock's quantity.
      description: |-
        Example 的多個 ID 可能會因為資料庫的變動而改變，請確認各個 ID 都存在後再作為測試 ID 使用。
      tags:
        - Stock Admin API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StocksUpdate'

      responses:
        '200':
          description: 回傳含有 stocks 資訊的 data Object
        '400':
          description: Bad request，回傳 message Object
        '500':
          description: Internal Server Error

  /api/1.0/stores:
      summary: 測試
      get:
        summary: Return stores' information around the user.
        tags:
          - Get Store API
        parameters:
          - name: longitude
            in: query
            description: |-
              The user's longitude. 

              *Example*: 121.55
            required: false
            schema:
              type: float
              example: 121.55
          - name: latitude
            in: query
            description: |-
              The user's latitude. 

              *Example*: 25.03
            required: false
            schema:
              type: float
              example: 25.03
        responses:
          '200':
            description: 回傳裝有 stores 資訊的 data Object。
          '400':
            description: 使用者周圍地區無商家。
                        <br>回傳 message Object
          '500':
            description: Internal Server Error
  
  /api/1.0/foods:
      summary: 測試
      get:
        summary: Return foods' information of the store.
        tags:
          - Get Food API
        parameters:
          - name: id
            in: query
            description: |-
              The Store's ID that you want to access.

              *Example*: "642c41da6ec75b2d9485c67b"
            required: false
            schema:
              type: string
              example: "642c41da6ec75b2d9485c67b"
        responses:
          '200':
            description: 回傳裝有 foods 資訊的 data Object。
          '400':
            description: 無對應店家的ID、店家目前無食物，或是無對應食物的ID
          '500':
            description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  

  schemas:
    StoreInfo:
      type: object
      properties:
        name:
          type: string
          example: 好食咖哩
        category:
          type: string
          example: 其他
        tel:
          type: string
          example: 02-58758758
        address:
          type: string
          example: 台北市中正區重慶南路一段122號
        location:
          type: object
          properties:
            type:
              type: string
              example: Point
            coordinates:
              type: array
              items:
                type: number
              example: [121.513, 25.032]
    
    StoreUpdate:
      type: object
      properties:
        storeID:
          type: string
          example: 64297c685d38da6c6aec99d2
        updateInfo:
          type: object
          properties:
            name:
              type: string
              example: 燒烤王
            tel:
              type: string
              example: 02-98938953
            location:
              type: object
              properties:
                type:
                  type: string
                  example: Point
                coordinates:
                  type: array
                  items:
                    type: number
                  example: [81.513, 46.032]
    
    FoodInfo:
      type: object
      properties:
        storeID:
          type: string
          example: 642a9a4510330d767c0fd0e7
        updateInfo:
          type: object
          properties:
            name:
              type: string
              example: 黯然銷魂飯
            category:
              type: string
              example: 飯
            tag:
              type: string
              example: 港式
            original_price:
              type: integer
              example: 100
            discount_price:
              type: integer
              example: 80
            description:
              type: string
              example: 濃郁的咖哩配上嫩雞，完美絕配！

    FoodUpdate:
      type: object
      properties:
        foodID:
          type: string
          example: 642a70ecd0781a1d4a5ab4e4
        updateInfo:
          type: object
          properties:
            name:
              type: string
              example: 番茄公仔麵
            category:
              type: string
              example: 飯
            tag:
              type: string
              example: 港式
            original_price:
              type: integer
              example: 200
            discount_price:
              type: integer
              example: 125

    StocksUpdate:
      type: object
      properties:
        storeID:
          type: string
          example: 642a9a4510330d767c0fd0e7
        foodID:
          type: string
          example: 642acf92fe71d1fc244d85fc
        updateQty:
          type: integer
          example: 10
